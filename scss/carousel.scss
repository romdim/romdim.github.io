%invisible {
  opacity: 0;
  z-index: auto;
}

 %visible {
  opacity: 1 !important;
  z-index: 1;
}

.carousel {
  position: relative;
  &__nav {
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    .previous, .next {
      position: relative;
      width: 2.5rem;
      height: 2.5rem;
      label {
        width: 2.5rem;
        height: 2.5rem;
        position: absolute;
        right: 0;
        top: 0;
        cursor: pointer;
        @extend %invisible;
      }
    }
    .previous > label {
      background: url('../img/nav/chevron-up.svg') no-repeat;
      background-size: cover;
    }
    .next > label {
      background: url('../img/nav/chevron-down.svg') no-repeat;
      background-size: cover;
    }
    .dots {
      width: 2.5rem;
      label {
        display: block;
        width: 1.25rem;
        height: 1.25rem;
        background: url('../img/nav/dot.svg') no-repeat;
        background-size: cover;
        cursor: pointer;
        margin: 0.625rem auto;
      }
    }
  }
}

@mixin carousel($items, $columns, $animation: 'default') {
  .carousel {
    width: 100%;

    > input[type="radio"] {
      position: absolute;
      top: 0;
      left: 0;
      @extend %invisible;

      &:checked {
        ~ .carousel__items .carousel__item,
        ~ .carousel__nav > .previous > label,
        ~ .carousel__nav > .next > label {
          @extend %invisible;
        }
      }

      @for $i from 1 through $items {
        &:nth-child(#{$i}) {
          &:checked {
            ~ .carousel__items .carousel__item {
              @if $animation == 'default' {
                &:nth-child(#{$i}) {
                  @extend %visible;
                }
              }
            }

            ~ .carousel__nav {
              .previous {
                label {
                  @if $i == 1 {
                    &:nth-child(#{$items}) {
                      @extend %visible;
                    }
                  } @else {
                    &:nth-child(#{$i - 1}) {
                      @extend %visible;
                    }
                  }
                }
              }

              .next {
                label {
                  @if $i == $items {
                    &:nth-child(1) {
                      @extend %visible;
                    }
                  } @else {
                    &:nth-child(#{$i + 1}) {
                      @extend %visible;
                    }
                  }
                }
              }

              .dots {
                label {
                  &:nth-child(#{$i}) {
                    background: url('../img/nav/dot-selected.svg') no-repeat;
                    background-size: cover;
                  }
                }
              }
            }
          }
        }
      }
    }

    &__items {
      margin: 0;
      padding: 0;
      list-style-type: none;
      width: calc(100% - 3.5rem);
      height: calc(min(2000px, 100vw) * #{$columns}/12 * 9/16);
      position: relative;
    }

    &__item {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      transition: opacity 1s;
      -webkit-transition: opacity 1s;

      * {
        height: 100%;
      }

      .logo-bg {
        padding-top: 56.25%;
      }

      .svg {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
  
        width: 50%;
        height: auto;
      }
    }
  }
}